name: Build site
on: push

# Allow this job to clone the repo
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Install, build, and upload your site
        uses: withastro/action@v2
        with:
          node-version: 20
          package-manager: npm@latest

  get_gh_infos:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get_pr_number.outputs.result }}
      branch_name: ${{ steps.get_branch_name.outputs.branch }}
      comment-id: ${{ steps.fc.outputs.comment-id }}
    steps:
      - uses: actions/github-script@v7
        id: get_pr_number
        with:
          script: |
            if (context.issue?.number) {
              // Return issue number if present
              return context.issue.number;
            } else {
              // Otherwise return issue number from commit
              const prs = (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data;
              return prs.length ? prs[0].number : '';
            }
          result-encoding: string

      - name: Extract branch name
        id: get_branch_name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Find Comment
        if: steps.get_pr_number.outputs.result
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ steps.get_pr_number.outputs.result }}
          comment-author: "github-actions[bot]"
          body-includes: E2E test results

      - name: echo outputs
        run: |
          echo "pr_number=${{ steps.get_pr_number.outputs.result }}"
          echo "branch_name=${{ steps.get_branch_name.outputs.branch }}"
          echo "comment-id=${{ steps.fc.outputs.comment-id }}"

  tests_unit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache-dependency-path: "./package-lock.json"
          cache: "npm"
      - name: install dependencies
        run: npm ci
      - name: unit test
        run: npm run test:unit

  tests_e2e:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.upload-test-results.outputs.artifact }}
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache-dependency-path: "./package-lock.json"
          cache: "npm"

      - name: download build artifact in dist
        uses: actions/download-artifact@v4
        with:
          name: github-pages
      - name: untar build artifact
        run: mkdir ./dist && tar -xvf ./artifact.tar -C ./dist

      - name: install dependencies, build docker container
        run: |
          npm ci
          npm run docker:build-e2e
      - name: Ensure shared volume is accessible for docker container
        run: chmod -R 777 ./e2e/__image_snapshots__
      - name: test build
        run: npm run test:e2e

      - name: tar e2e test results
        if: always() # always run this step even if the previous steps fail
        run: tar -cvf ./e2e-test-results.tgz e2e/__image_snapshots__
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() # always run this step even if the previous steps fail
        with:
          name: test-e2e-results
          path: ./e2e-test-results.tgz

  comment_on_pr:
    needs: [tests_e2e, tests_unit, get_gh_infos]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: always() && needs.get_gh_infos.outputs.pr_number != ''
    steps:
      - name: Create Success Comment
        if: needs.tests_e2e.result == 'success' && needs.tests_unit.result == 'success'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.get_gh_infos.outputs.pr_number }}
          comment-id: ${{ needs.get_gh_infos.outputs.comment-id }}
          body: |
            :tada: E2E test results are available in the [artifact](${{ needs.tests_e2e.outputs.artifact.artifact-url }}) :tada:
          edit-mode: replace

      - name: Create Failure Comment
        if: needs.tests_e2e.result != 'success' || needs.tests_unit.result != 'success'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.get_gh_infos.outputs.pr_number }}
          comment-id: ${{ needs.get_gh_infos.outputs.comment-id }}
          body: |
            :red_circle: E2E test results are available in the [artifact](${{ needs.tests_e2e.outputs.artifact.artifact-url }}) :red_circle:

            To update the test screenshots run:

            ```bash
            npm run test:e2e -- -u
            ```
          edit-mode: replace

  deploy:
    needs: [tests_e2e, tests_unit, get_gh_infos]
    if: success() && needs.get_gh_infos.outputs.branch_name == 'main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
